{"version":3,"sources":["types/joke.ts","store/action-creators/joke.ts","store/action-creators/index.ts","components/Meme.style.ts","components/Meme.tsx","hooks/useActions.ts","hooks/useTypedSelector.ts","App.tsx","store/reducers/jokeReducer.ts","store/index.ts","index.tsx"],"names":["JokeActionTypes","fetchJoke","dispatch","a","type","FETCH_JOKE","axios","get","headers","Accept","response","setTimeout","FETCH_JOKE_SUCCESS","payload","data","joke","FETCH_JOKE_ERROR","JokeActionCreators","Container","styled","div","Joke","Button","Meme","useDispatch","bindActionCreators","actionCreators","useActions","onClick","useTypedSelector","useSelector","App","state","error","loading","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"8LAMYA,E,iGAAAA,K,wBAAAA,E,wCAAAA,E,qCAAAA,M,KCFL,I,MAAMC,EAAY,WACrB,8CAAO,WAAMC,GAAN,eAAAC,EAAA,sEAECD,EAAS,CAACE,KAAMJ,EAAgBK,aAFjC,SAGwBC,IAAMC,IAAI,8BAA+B,CAC5DC,QAAS,CACLC,OAAQ,sBALjB,OAGOC,EAHP,OAQCC,YAAW,kBAAMT,EAAS,CAACE,KAAMJ,EAAgBY,mBAAoBC,QAASH,EAASI,KAAKC,SAAQ,KARrG,gDAUCb,EAAS,CAACE,KAAMJ,EAAgBgB,iBAAkBH,QAAS,6BAV5D,yDAAP,uDCHJ,iBACOI,G,cCDMC,EAAYC,IAAOC,IAAV,6eAcTC,EAAOF,IAAOC,IAAV,yKAWJE,EAASH,IAAOC,IAAV,se,OCnBNG,EAAqB,SAAC,GAAyB,IAAxBT,EAAuB,EAAvBA,KAEzBb,ECLe,WACtB,IAAMC,EAAWsB,cACjB,OAAOC,YAAmBC,EAAgBxB,GDGtByB,GAAb1B,UAEP,OACI,eAACiB,EAAD,WACI,cAACG,EAAD,UACKP,IAEL,cAACQ,EAAD,CAAQM,QAAS,kBAAM3B,KAAvB,4BEdC4B,EAAoDC,ICoBlDC,MApBf,WAEE,MAA+BF,GAAiB,SAAAG,GAAK,OAAIA,KAAlDjB,EAAP,EAAOA,KAAMkB,EAAb,EAAaA,MAEb,OAFA,EAAoBC,QAIhB,cAAC,EAAD,CAAMpB,KAAQ,uBAETmB,EAEL,cAAC,EAAD,CAAMnB,KAAQ,6BAId,cAAC,EAAD,CAAMA,KAAQC,K,QCfdoB,EAA0B,CAC5BpB,KAAM,gBACNkB,MAAO,KACPC,SAAS,GCDAE,EAAQC,aDIM,WAAyD,IAAxDL,EAAuD,uDAA/CG,EAAcG,EAAiC,uCAC/E,OAAQA,EAAOlC,MACX,KAAKJ,EAAgBK,WACjB,MAAM,CACFU,KAAM,GACNkB,MAAO,KACPC,SAAS,GAEjB,KAAKlC,EAAgBY,mBACjB,MAAM,CACFG,KAAMuB,EAAOzB,QACboB,MAAO,KACPC,SAAS,GAEjB,KAAKlC,EAAgBgB,iBACjB,MAAM,CACFD,KAAM,GACNkB,MAAOK,EAAOzB,QACdqB,SAAS,GAEjB,QACI,OAAOF,KCzB2BO,YAAgBC,MCG9DC,IAASC,OACP,cAAC,IAAD,CAAUN,MAASA,EAAnB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.8c031c18.chunk.js","sourcesContent":["export interface JokeState{\r\n    joke: string,\r\n    loading: boolean,\r\n    error: null | string,\r\n}\r\n\r\nexport enum JokeActionTypes{\r\n    FETCH_JOKE = 'FETCH_JOKE',\r\n    FETCH_JOKE_SUCCESS = 'FETCH_JOKE_SUCCESS',\r\n    FETCH_JOKE_ERROR = 'FETCH_JOKE_ERROR',\r\n}\r\n\r\ninterface FetchJokeAction{\r\n    type: JokeActionTypes.FETCH_JOKE;\r\n}\r\n\r\ninterface FetchJokeSuccessAction{\r\n    type: JokeActionTypes.FETCH_JOKE_SUCCESS;\r\n    payload: string;\r\n}\r\n\r\ninterface FetchJokeErrorAction{\r\n    type: JokeActionTypes.FETCH_JOKE_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport type JokeAction = FetchJokeAction | FetchJokeSuccessAction | FetchJokeErrorAction","import axios from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport { JokeAction, JokeActionTypes } from \"../../types/joke\"\r\n\r\nexport const fetchJoke = () => {\r\n    return async(dispatch:Dispatch<JokeAction>) => {\r\n        try {\r\n            dispatch({type: JokeActionTypes.FETCH_JOKE})\r\n            const response = await axios.get('https://icanhazdadjoke.com/', {\r\n                headers: {\r\n                    Accept: 'application/json'\r\n                }\r\n            })\r\n            setTimeout(() => dispatch({type: JokeActionTypes.FETCH_JOKE_SUCCESS, payload: response.data.joke}), 700)\r\n        } catch (error) {\r\n            dispatch({type: JokeActionTypes.FETCH_JOKE_ERROR, payload: 'Can`t remember a joke :('})\r\n        }\r\n    }\r\n}","import * as JokeActionCreators from './joke'\r\n\r\nexport default{\r\n    ...JokeActionCreators,\r\n}","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\nbackground-color: #1e990e;\r\nwidth: 80vw;\r\nheight: 80vh;\r\ntext-align: center;\r\nborder-radius: 30px;\r\nborder: 2px solid #fff;\r\nposition: absolute;\r\ntop: 50%;\r\nleft: 50%;\r\ntransform: translate(-50%, -50%);\r\nword-wrap:\\ break-word;\r\n`\r\n\r\nexport const Joke = styled.div`\r\nfont-size: 42px;\r\nmargin-top: 150px;\r\n@media(max-width:800px){\r\n    margin-top: 50px;\r\n};\r\n@media(max-width:400px){\r\n    font-size:32px;\r\n}\r\n`\r\n\r\nexport const Button = styled.div`\r\nwidth: 30vw;\r\nheight: 50px;\r\nbackground-color: #99170e;\r\nborder-radius: 20px;\r\nposition: fixed;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nposition: absolute;\r\nleft: 50%;\r\nbottom: 20%;\r\ntransform: translate(-50%, 0);\r\nfont-size: 25px;\r\nborder: 2px solid #fff;\r\n&:hover{\r\n  cursor: pointer;\r\n  background-color: #b50c05;\r\n  box-shadow: 10px 5px 5px black;\r\n  transition: .3s linear;\r\n}\r\n@media (max-width: 800px) {\r\n    bottom: 10%;\r\n}\r\n`","import { FC } from 'react'\r\nimport { useActions } from '../hooks/useActions'\r\nimport { Button, Container, Joke } from './Meme.style'\r\n\r\ninterface MemeProps{\r\n    data: string,\r\n}\r\n\r\nexport const Meme:FC<MemeProps> = ({data}): JSX.Element => {\r\n\r\n    const {fetchJoke} = useActions()\r\n\r\n    return(\r\n        <Container>\r\n            <Joke>\r\n                {data}\r\n            </Joke>\r\n            <Button onClick={() => fetchJoke()}>\r\n            GET A JOKE\r\n            </Button>\r\n        </Container>\r\n    )\r\n}","import { useDispatch } from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport actionCreators from \"../store/action-creators\"\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(actionCreators, dispatch)\r\n}","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { JokeState } from \"../types/joke\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<JokeState> = useSelector","import { Meme } from './components/Meme';\nimport { useTypedSelector } from './hooks/useTypedSelector';\n\nfunction App() {\n\n  const {joke, error, loading} = useTypedSelector(state => state)\n  \n  if(loading) {\n    return (\n      <Meme data = {'Remember a joke...'} />\n    );\n  }else if(error) {\n    return (\n      <Meme data = {'Can`t remember a joke :('} />\n    );\n  }else{\n    return (\n      <Meme data = {joke} />\n    );\n  }\n  \n}\n\nexport default App;\n","import { JokeAction, JokeActionTypes, JokeState } from \"../../types/joke\";\r\n\r\nconst initialState: JokeState = {\r\n    joke: 'Want a joke?)',\r\n    error: null,\r\n    loading: false,\r\n}\r\n\r\nexport const jokeReducer = (state = initialState, action: JokeAction):JokeState => {\r\n    switch (action.type) {\r\n        case JokeActionTypes.FETCH_JOKE:\r\n            return{ \r\n                joke: '',\r\n                error: null,\r\n                loading: true,\r\n            }\r\n        case JokeActionTypes.FETCH_JOKE_SUCCESS:\r\n            return{ \r\n                joke: action.payload,\r\n                error: null,\r\n                loading: false,\r\n            }\r\n        case JokeActionTypes.FETCH_JOKE_ERROR:\r\n            return{ \r\n                joke: '',\r\n                error: action.payload,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { jokeReducer } from \"./reducers/jokeReducer\";\r\n\r\nexport const store = createStore(jokeReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}